objcet

#method
객체에 저장된 데이터가 함수일 때 우리는 그것을 메소드라고 부릅니다 . 
속성은 객체가 가지고 있는 것이고 메소드는 객체가 하는 것입니다.

객체 메서드는 계속 사용해왔습니다.
예를 들어 console는 전역 자바스크립트 개체이고 .log()는 해당 개체의 메서드입니다. 
Math또한 전역 자바 스크립트 객체이며 해당 객체 .floor()에 대한 메서드입니다.

쉼표로 구분된 일반 key-value 쌍을 만들어 객체 리터럴에 메서드를 포함할 수 있습니다. 
key는 메서드의 이름 역할을 하는 반면 값은 익명 함수 식입니다.

//실습
let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.';

let alienShip = {
  retreat () {
    console.log(retreatMessage);
  },
  takeOff() {
    console.log('Spim... Borp... Glix... Blastoff!');
  }
};
alienShip.retreat(), alienShip.takeOff();



#중첩된 개체
응용 프로그램 코드에서 개체는 종종 중첩됩니다. 
개체는 속성으로 다른 개체를 가질 수 있으며 이 속성은 더 많은 개체의 배열인 속성을 가질 수 있습니다

const spaceship = {
     telescope: {
        yearBuilt: 2018,
        model: '91031-XLT',
        focalLength: 2032 
     },
    crew: {
        captain: { 
            name: 'Sandra', 
            degree: 'Computer Engineering', 
            encourageTeam() { console.log('We got this!') } 
         }
    },
    engine: {
        model: 'Nimbus2000'
     },
     nanoelectronics: {
         computer: {
            terabytes: 100,
            monitors: 'HD'
         },
        'back-up': {
           battery: 'Lithium',
           terabytes: 50
         }
    }
}; 

연산자를 연결하여 중첩 속성에 액세스할 수 있습니다. 
각 계층에서 어떤 연산자를 사용하는 것이 타당한지 주의를 기울여야 합니다. 
왼쪽에서 오른쪽으로 각 표현을 평가하여 각 작업이 좀 더 다루기 쉽게 느껴지도록 하는 것이 좋습니다.

spaceship.nanoelectronics['back-up'].battery; // Returns 'Lithium'


//실습
let spaceship = {
  passengers: [{name: 'Space Dog'}],
  telescope: {
    yearBuilt: 2018,
    model: "91031-XLT",
    focalLength: 2032,
  },
  crew: {
    captain: {
      name: "Sandra",
      degree: "Computer Engineering",
      encourageTeam() {
        console.log("We got this!");
      },
      "favorite foods": ["cookies", "cakes", "candy", "spinach"],
    },
  },
  engine: {
    model: "Nimbus2000",
  },
  nanoelectronics: {
    computer: {
      terabytes: 100,
      monitors: "HD",
    },
    "back-up": {
      battery: "Lithium",
      terabytes: 50,
    },
  },
};
let capFave = spaceship.crew.captain["favorite foods"][0];
let firstPassenger = spaceship.passengers[0];




#참조로 전달
개체는 참조로 전달됩니다 . 
이것은 우리가 객체에 할당된 변수를 함수에 인수로 전달할 때 컴퓨터가 매개변수 이름을 
해당 객체를 보유하는 메모리의 공간을 가리키는 것으로 해석한다는 것을 의미합니다. 
결과적으로 객체 속성을 변경하는 함수는 실제로 객체를 영구적으로 변경합니다(객체가 const변수에 할당된 경우에도).


//실습
let spaceship = {
  'Fuel Type': 'Turbo Fuel',
  homePlanet: 'Earth',
};

let greenEnergy = obj => {
  obj['Fuel Type'] = 'avocado oil';
};

let remotelyDisable = obj => {
  obj.disabled = true;
};

greenEnergy(spaceship);
remotelyDisable(spaceship);
console.log(spaceship)