object
#개체 소개
JavaScript에는 7개의 기본 데이터 유형만 있으며 그 중 6개는 기본 데이터 유형(문자열 ,숫자 , boolean, null, undefined 및 기호)입니다.
일곱 번째 유형인 객체를 사용하여 코드를 보다 복잡한 가능성에 개방합니다. 
JavaScript 객체를 사용하여 농구공과 같은 실제 사물을 모델링하거나 객체를 사용하여 웹을 가능하게 하는 데이터 구조를 구축할 수 있습니다.



# 객체 리터럴 생성
모든 JavaScript 유형과 마찬가지로 객체를 변수에 할당할 수 있습니다. 중괄호({ })를 사용 하여 객체 리터럴을 지정합니다 .

let spaceship = {}; // spaceship is an empty object
정렬되지 않은 데이터로 객체를 채웁니다. 이 데이터는 key-value 쌍 으로 구성됩니다 . key는 value를 보유하는 메모리의 위치를 ​​가리키는 변수 이름과 같습니다.
키의 값은 함수 또는 기타 개체를 포함하여 언어의 모든 데이터 유형이 될 수 있습니다.

key의 이름 또는 식별자를 작성 하고 콜론( : )과 value을 차례로 작성하여 key-value쌍을 만듭니다 . 객체 리터럴에서 각 key-value 쌍을 쉼표( ,)로 구분합니다. 
key는 문자열이지만 특수 문자가 없는 key가 있는 경우 JavaScript를 사용하면 따옴표를 생략할 수 있습니다.



#속성 엑세스
객체의 속성에 접근할 수 있는 두 가지 방법이 있습니다. 첫 번째 방법은 점 표기법( .)입니다.
속성 점 표기법을 사용하여 객체의 이름, 점 연산자, 속성 이름(key)을 차례로 작성합니다.

let spaceship = {
  homePlanet: 'Earth',
  color: 'silver'
};
spaceship.homePlanet; // Returns 'Earth',
spaceship.color; // Returns 'silver',


해당 개체에 존재하지 않는 속성에 액세스하려고 하면 undefined가 반환됩니다.

//실습
let spaceship = {
  homePlanet: "Earth",
  color: "silver",
  "Fuel Type": "Turbo Fuel",
  numCrew: 5,
  flightPath: ["Venus", "Mars", "Saturn"],
};

let crewCount = spaceship.numCrew;
let planetArray = spaceship.flightPath;
console.log(crewCount); //output : 5
console.log(planetArray);

#대괄호 표기법
객체의 속성에 접근할 수 있는 두 번째 방법은 대괄호 표기법([ ])입니다.
숫자, 공백 또는 특수 문자가 포함된 키에 액세스할 때는 대괄호 표기법을 사용해야 합니다. 
이러한 상황에서 대괄호 표기법이 없으면 코드에서 오류가 발생합니다.
대괄호 표기법을 사용하면 대괄호 안의 변수를 사용하여 개체의 키를 선택할 수도 있어 특히 함수로 작업할 때 유용합니다.

let returnAnyProp = (objectName, propName) => objectName[propName];
returnAnyProp(spaceship, 'homePlanet'); // Returns 'Earth'

returnAnyProp(spaceship, 'homePlanet'); // Returns 'Earth'

returnAnyProp()를 점 표기법( )으로 함수 를 작성하려고 objectName.propName하면 컴퓨터는 매개변수 'propName'값이 아니라 객체의 key인 propName를 찾습니다 .


//실습
let spaceship = {
  "Fuel Type": "Turbo Fuel",
  "Active Mission": true,
  homePlanet: "Earth",
  numCrew: 5,
};
let propName = "Active Mission";

// Write your code below
let isActive = spaceship["Active Mission"];
console.log(spaceship[propName]);



#소유권 양도
일단 객체를 정의하고 나서도 객체는 변경 가능하므로 우리가 작성한 모든 속성에 집착할 필요 없습니다.
점 표기법, 대괄호 표기법 및 할당 연산자(=)를 사용하여 객체에 새 key - value 쌍을 추가하거나 기존 속성을 변경할 수 있습니다.
속성 할당에서 다음 두 가지 중 하나가 발생할 수 있습니다.

1. 속성이 객체에 이미 존재하는 경우 이전에 보유했던 값이 새로 할당된 값으로 대체됩니다.
2. 해당 이름의 속성이 없는 경우 새 속성이 개체에 추가됩니다.


const로 선언된 객체를 재할당할 수는 없지만 새 속성을 추가하고 해당 속성을 변경할 수 있습니다.

const spaceship = {type: 'shuttle'};
spaceship = {type: 'alien'};   // TypeError: Assignment to constant variable.
spaceship.type = 'alien';   // Changes the value of the type property
spaceship.speed = 'Mach 5';  // Creates a new key of 'speed' with a value of 'Mach 5'


delete연산자 를 사용하여 개체에서 속성을 삭제할 수 있습니다 .

const spaceship = {
  'Fuel Type': 'Turbo Fuel',
  homePlanet: 'Earth',
  mission: 'Explore the universe' 
};
delete spaceship.mission;  // Removes the mission property


//실습

let spaceship = {
  "Fuel Type": "Turbo Fuel",
  homePlanet: "Earth",
  color: "silver",
  "Secret Mission": "Discover life outside of Earth.",
};
// Write your code below
spaceship.color = "glorious gold";
spaceship.numEngines = 4;
delete spaceship["Secret Mission"];